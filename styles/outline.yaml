cameras:
    camera1:
        type: isometric
lights:
    directional1:
        type: directional
        direction: [.3, .9, -.9]
        diffuse: .9
        ambient: .7

styles:
    flatlines:
        base: lines
        lighting: false # ignore lights
    tools:
        base: polygons
        shaders:
            blocks:
                global: |
                    // GridTile
                    //=============================
                    varying vec3 v_pos;
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    float TileGrid(float res){
                        vec2 st = TileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.2;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
                    // Grain
                    //=============================
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float noise(vec2 x) {
                        vec2 i = floor(x);
                        vec2 f = fract(x);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float fbm( in vec2 p ){
                        float s = 0.0;
                        float m = 0.0;
                        float a = 0.5;
                        for(int i=0; i<2; i++ ){
                            s += a * noise(p);
                            m += a;
                            a *= 0.5;
                            p *= 2.0;
                        }
                        return s/m;
                    }
                    float grain(vec2 pos){
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                    }
                    // Stripes
                    //=============================
                    mat2 rotate2d(float angle){
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    float stripes(vec2 st){
                        st = rotate2d(3.14159265358*-0.25 )*st;
                        //return step(.9,1.0-smoothstep(.5,1.,abs(sin(st.x*3.14159265358))));
                        return step(.75,1.0-smoothstep(.75,1.,abs(sin(st.x*3.14159265358)))); // more spaced out stripes?
                    }
                position: |
                    // GridTile
                    v_pos = a_position.xyz * 32767.;
    gradient1:
        mix: tools
        base: polygons
        shaders:
            blocks:
                filter: |
                    // GRADIENTS!
                    
                    // mix blue and white with X coordinate
                    color.rgb = mix(vec3(0.750,0.883,1.000), vec3(1.000,1.000,1.000), gl_FragCoord.x / u_resolution.x); 
                    color.rgb -= grain(gl_FragCoord.xy)*0.2;

    dots:
        mix: tools
        blend: overlay
        base: polygons
        texcoords: true
        shaders:
            blocks:
                global: |
                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }
                    
                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }
                    
                    float circle(vec2 _st, float _radius){
                      vec2 pos = vec2(0.5)-_st;
                      return smoothstep(1.0-_radius,1.0-_radius+_radius*0.2,1.-dot(pos,pos)*3.14);
                    }
                color: |
                    vec2 st = TileCoords();
                    st = brickTile(st,70.0);
                    float b = circle(st,0.1);
                    color *= vec4(b);

sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            lines:
                order: 4
                width: 1px
                color: [0.000,0.000,0.000]
            polygons:
                order: 0
                color: [1.0,1.0,1.0]
    water:
        data: { source: osm }
        draw:
            gradient1:
                order: 1
                # color: [0.159,0.159,0.159]
    landuse:
        data: { source: osm }
        draw:
            dots:
                order: 1
                color: [0.000,0.000,0.000]

    buildings:
        data: { source: osm }
        filter: { $zoom: { min: 10 } }
        draw:
            polygons:
                order: 10
                color: [0.320,0.615,1.000]
            outline:
                style: lines
                order: 11
                color: [0.0,0.0,0.0]
                width: [[12, 0.25px], [13, 0.5px], [14, 1px]]
                extrude: true

        extruded:
            filter: { $zoom: { min: 14 } }
            draw:
                polygons:
                    extrude: function () { return feature.height > 50 || $zoom >= 16; }

            # in zoom 14-15, render buildings as 2d dot patterns
            outlines:
                filter: { $zoom: { max: 16 }, height: { max: 50 } }
                draw:
                    polygons:
                        style: dots
                    outline:
                        visible: false
                        # extrude: false
                        # width: .5px

    osm-roads:
        data: { source: osm, layer: roads }
        filter: { not: { highway: service, kind: rail }, $zoom: { min: 8 } }

        highway:
            filter: { kind: highway }
            draw:
                flatlines:
                    # put highways on top of all other roads
                    order: 8
                    color: [[7, [0, 0, 0]], [8, [0, 0, 0]], [9, [0, 0, 0]], [10, [1.000,0.992,0.286]], [11, [1.000,0.992,0.286]], [12, [1.000,0.992,0.286]], [13, [1.000,0.992,0.286]]]
                    width: [[7, 0.7px], [8, 0.65px], [9, 0.75px], [10, 1.5px], [13, 3px], [15, 5px], [17, 10px]]
                    outline:
                        color: [0.0,0.0,0.0]
                        width: [[7, 0px], [8, 0px], [9, 0px], [10, 0.25px], [11, 0.5px], [12, 0.75px],[13, 1px]]
