# Author: Geraldine Sarmiento
#

sources:
    # osm:
    #     type: TopoJSONTiles
    #     url: //tilestache-dev2-us-east-ext-1189213459.us-east-1.elb.amazonaws.com/osm/all/{z}/{x}/{y}.topojson

    osm:
        type: TopoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw

camera:
    type: perspective
    axis: [0, .1] # very small building extrusion



# lights:
#     light2:
#         type: point
#         position: [0,0, -1800]
#         origin: camera
#         ambient: .1
#         diffuse: .9
#         specular: .1

# lights:
#     light1:
#         type: point
#         direction: [1, 1, -.5]
#         diffuse: .5
#         ambient: .85

styles:
    flatlines:
        base: lines
        lighting: false # ignore lights
    flatpolys:
        base: polygons
        lighting: false # ignore lights

    tools:
        base: polygons
        shaders:
            blocks:
                global: |
                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }
                    
                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }
                    
                    float circle(vec2 _st, float _radius){
                      vec2 pos = vec2(0.5)-_st;
                      return smoothstep(1.0-_radius,1.0-_radius+_radius*0.2,1.-dot(pos,pos)*3.14);
                    }

                    // GridTile
                    //=============================
                    varying vec3 v_pos;
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    float TileGrid(float res){
                        vec2 st = TileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
                    // Grain
                    //=============================
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float noise(vec2 x) {
                        vec2 i = floor(x);
                        vec2 f = fract(x);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
                    }
                    float fbm( in vec2 p ){
                        float s = 0.0;
                        float m = 0.0;
                        float a = 0.5;
                        for(int i=0; i<2; i++ ){
                            s += a * noise(p);
                            m += a;
                            a *= 0.5;
                            p *= 2.0;
                        }
                        return s/m;
                    }
                    float grain(vec2 pos){
                        vec2 st = pos/u_resolution.xy-vec2(.7);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                    }
                position: |
                    // GridTile
                    v_pos = a_position.xyz * 32767.;
    grid:
        base: polygons
        mix: tools
        shaders:
            blocks:
                filter: |
                    color.rgb += vec3(.2) * TileGrid(); // grid lines lighten
                    //color.rgb += vec3(0.5, 0.5, 1.) * TileGrid(); // purple-ish grid lines
                    color.rgb -= grain(gl_FragCoord.xy)*0.4-0.15;
                    //color.r -= grain(gl_FragCoord.xy)*0.5; // only apply grain to red channel

    ground:
        base: polygons
        mix: tools
        shaders:
            blocks:
                filter: |
                    color.rgb -= grain(gl_FragCoord.xy)*0.5-0.15;

    park_dots:
        mix: tools
        # blend: overlay # reminder: try inlay later
        base: polygons
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = TileCoords();
                    st = brickTile(st,70.0);
                    float dot_value = circle(st,0.15); // how strong is the dot: 1 = full dot, 0 = no dot

                    // use mix() to blend between dot and grain
                    vec3 grain_color = color.rgb - grain(gl_FragCoord.xy)*0.7+0.19;
                    color.rgb = mix(grain_color, vec3(0.8), dot_value);

    forest_dots:
        mix: tools
        # blend: overlay # reminder: try inlay later
        base: polygons
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = TileCoords();
                    st = brickTile(st,40.0);
                    float dot_value = circle(st,0.3); // how strong is the dot: 1 = full dot, 0 = no dot

                    // use mix() to blend between dot and grain
                    vec3 grain_color = color.rgb - grain(gl_FragCoord.xy)*0.7+0.19;
                    color.rgb = mix(grain_color, vec3(0.8), dot_value);

    road_grain:
        base: lines
        mix: tools
        shaders:
            blocks:
                filter:
                    color.rgb -= grain(gl_FragCoord.xy)*0.9;

    pattern:
        mix: tools
        base: polygons
        shaders:
            blocks:
                global: |
                    float random(in vec3 _st){ 
                        return fract(sin(dot(_st.xyz,
                                             vec3(70.9898,78.233,32.4355)))* 
                            43758.5453123);
                    }
                    
                filter: |
                    vec3 pos = vec3(TileCoords()*150.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.65);


scene:
    background:
        color: [1.0,1.0,1.0]

layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            lines:
                order: 4
                width: 1px
                color: '#ffffff'
            ground:
                order: 0
                color: [1.0,1.0,1.0]

    water:
        data: { source: osm, layer: water }
        draw:
            grid:
                order: 1
                color: [0.8,0.8,0.8]

    landuse:
        data: { source: osm }
        park:
            filter:
                kind: park
            draw:
                park_dots:
                    order: 5
                    color: white

        forest:
            filter:
                kind: forest
            draw:
                pattern:
                    order: 4
                    color: white

        urban_area:
            filter:
                kind: ['urban area']
            draw:
                polygons:
                    order: 4
                    color: [0.988,0.636,0.591]

    osm-roads:
        data: { source: osm, layer: roads }
        filter: { not: { highway: service, kind: rail }, $zoom: { min: 8 } }

        highway:
            filter: { kind: highway }
            draw:
                flatlines:
                    # put highways on top of all other roads
                    order: 8
                    color: [0,0,0]
                    width: [[7, 0.5px], [9, 0.75px], [11, 1.25px], [14, 2px], [15, 4px]]
                    # outline:
                    #     color: [0.180,0.278,0.600]
                    #     width: [[7, 1px], [9, 1.5px], [11, 2px], [14, 3.5px]]

            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    flatlines:
                        color: [0,0,0]
                        width: [[12, 0.5px],[14, 1px]]
                        # outline:
                        #     color: [0.180,0.278,0.600]
                        #     width: [[12, 1px],[14, 4px]]
        major_road:
            filter: { kind: major_road }
            draw:
                road_grain:
                    order: 7
                    color: [[10, [0.7,0.7,0.7]], [13, [0.9,0.9,0.9]], [13, [0.95,0.95,0.95]]]
                    width: [[10, 0.2px], [11, 0.35px], [14, 2px], [15, 3px]]
        minor_road:
            filter: { kind: minor_road, not: { highway: service } }
            draw:
                flatlines:
                    order: 6
                    color: [[15, [0.7, 0.7, 0.7]], [17, [0.8, 0.8, 0.8]]]
                    width: [[13, 0.2px], [14, 0.4px], [15, 1px], [16, 2px]]

    places:
        data: { source: osm }

        ocean_labels:
            filter: 
                kind: ocean
            ocean_z1:
                filter:
                    $zoom: [1,2]
                draw: { text: { font: { typeface: italic 12pt Baskerville, fill: '#90bab9'}}}

            ocean_z3:
                filter:
                    $zoom: [3,4]
                draw: { text: { font: { typeface: italic 14pt Baskerville, fill: '#90bab9'}}}

            ocean_z4:
                filter:
                    $zoom: [5]
                draw: { text: { font: { typeface: italic 15pt Baskerville, fill: '#90bab9'}}}

        sea_labels:                    
            filter:
                $zoom: [4,5,6]
                kind: sea
            draw: { text: { font: { typeface: italic 9pt Baskerville, fill: '#90bab9'}}}

        country_labels:
            filter:
                kind: country
            country_z1:
                filter:
                    $zoom: [1,2]
                draw: { text: { font: { typeface: 10pt Helvetica, fill: black}}}

            country_z3:
                filter:
                    $zoom: [3]
                draw: { text: { font: { typeface: 8pt Helvetica, fill: black}}}

            country_z6:
                filter:
                    $zoom: [6]
                draw: { text: { font: { typeface: 6pt Helvetica, fill: black}}}

        state_labels:
            filter:
                kind: state
            state_z4:
                filter:
                    $zoom: [4]
                draw: { text: { font: { typeface: 5pt Helvetica, capitalized: true, fill: black}}}

            state_z5:
                filter:
                    $zoom: [5]
                draw: { text: { font: { typeface: 7pt Helvetica, capitalized: true, fill: black}}}

            state_z6:
                filter:
                    $zoom: [6]
                draw: { text: { font: { typeface: 8pt Helvetica, capitalized: true, fill: black}}}

        province_labels:
            filter:
                kind: province
            draw: { text: { font: { typeface: 7pt Helvetica, capitalized: true, fill: black}}}

        cities_z4:
            filter:
                $zoom: [4,5]
                kind: ['Populated place', 'Admin-0 capital', 'Admin-1 capital']
            city1:
                filter:
                    scalerank: [0,1,2,3]
                draw: { text: { font: { typeface: 10pt Helvetica, fill: black}}}

            city2:
                filter:
                    scalerank: [4,5,6]
                draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        cities_z6:
            filter:
                $zoom: [6]
                kind: ['Populated place', 'Admin-0 capital', 'Admin-1 capital']
            cityz6-1:
                filter:
                    scalerank: [0,1,2,3]
                draw: { text: { font: { typeface: 11pt Helvetica, fill: black}}}
            cityz6-2:
                filter:
                    scalerank: [4,5,6]
                draw: { text: { font: { typeface: 9pt Helvetica, fill: black}}}

        cities_z7:
            filter:
                $zoom: [7]
                kind: ['Populated place', 'Admin-0 capital', 'Admin-1 capital']
            cityz7-1:
                filter:
                    scalerank: [0,1,2,3]
                draw: { text: { font: { typeface: 12pt Helvetica, fill: black}}}

            cityz7-2:
                filter:
                    scalerank: [4,5,6]
                draw: { text: { font: { typeface: 9pt Helvetica, fill: black}}}
            cityz7-3:
                filter:
                    scalerank: [7]
                draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        cities_z8:
            filter:
                $zoom: [8]
                kind: ['Populated place', 'Admin-0 capital', 'Admin-1 capital']
            cityz8_1:
                filter:
                    scalerank: [0,1,2,3]
                draw: { text: { font: { typeface: 12pt Helvetica, fill: black}}}
            cityz8_2:
                filter:
                    scalerank: [4,5,6]
                draw: { text: { font: { typeface: 9pt Helvetica, fill: black}}}
            cityz8_3:
                filter:
                    scalerank: [7,8]
                draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        cities_z9:
            filter:
                $zoom: [9]
                kind: ['Populated place', 'Admin-0 capital', 'Admin-1 capital']
            cityz9_1:
                filter:
                    scalerank: [0,1,2,3]
                draw: { text: { font: { typeface: 12pt Helvetica, fill: black}}}
            cityz9_2:
                filter:
                    scalerank: [4,5,6]
                draw: { text: { font: { typeface: 9pt Helvetica, fill: black}}}
            cityz9_3:
                filter:
                    scalerank: [7,8,9]
                draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        cities_z10:
            filter:
                $zoom: [10]
                kind: ['Populated place', 'Admin-0 capital', 'Admin-1 capital']
            cityz10_1:
                filter:
                    scalerank: [0,1,2,3]
                draw: { text: { font: { typeface: 12pt Helvetica, fill: black}}}
            cityz10_2:
                filter:
                    scalerank: [4,5,6]
                draw: { text: { font: { typeface: 9pt Helvetica, fill: black}}}
            cityz10_3:
                filter:
                    scalerank: [7,8,9,10]
                draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        landuse:
            filter:
                kind: landuse
            draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        town_labels:
            filter:
                kind: town
            draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        village_labels:
            filter:
                kind: village
            draw: { text: { font: { typeface: 8pt Helvetica, fill: black}}}

        hamlet_labels:
            filter:
                $zoom: { min: 14 }
                kind: hamlet
            draw: { text: { font: { typeface: 7pt Helvetica, fill: black}}}

        neighbourhood:
            filter:
                kind: neighbourhood
            draw: { text: { font: { typeface: 6pt Helvetica, capitalized: true, fill: black}}}

        suburb:
            filter:
                kind: suburb
            draw: { text: { font: { typeface: 8pt Helvetica, fill: black}}}

        quarter:
            filter:
                kind: quarter
            draw: { text: { font: { typeface: 6pt Helvetica, fill: black}}}